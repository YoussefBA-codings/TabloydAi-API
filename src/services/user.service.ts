import { Injectable } from '@nestjs/common';
import { PrismaService } from '../prisma.service';
import { User, Prisma } from '@prisma/client';

@Injectable()
export class UserService {
  constructor(private prisma: PrismaService) {}

	async user(
    userWhereUniqueInput: Prisma./* A type that is generated by Prisma. It is a type that is used to
    filter a user by a unique field. */
    UserWhereUniqueInput,
  ): Promise<Partial<User> | null> {
    return this.prisma.user.findUnique({
      where: userWhereUniqueInput,
      select: {
        id: true,
        userName: true,
        fullName: true,
        email: true,
        role: true,
        createdAt: true,
        updatedAt: true
      },
    });
  }

  async users(params: {
    skip?: number;
    take?: number;
    cursor?: Prisma.UserWhereUniqueInput;
    where?: Prisma.UserWhereInput;
    orderBy?: Prisma.UserOrderByWithRelationInput;
  }): Promise<Partial<User>[]> {
    const { skip, take, cursor, where, orderBy } = params;
    return this.prisma.user.findMany({
      skip,
      take,
      cursor,
      where,
      orderBy,
      select: {
        id: true,
        userName: true,
        fullName: true,
        email: true,
        role: true,
        createdAt: true,
        updatedAt: true
      },
    });
  }

  async createUser(data: Prisma.UserCreateInput): Promise<Partial<User>> {
    return this.prisma.user.create({
      data,
      select: {
        id: true,
        userName: true,
        fullName: true,
        email: true,
        role: true,
        createdAt: true,
        updatedAt: true
      },
    });
  }
	
}
