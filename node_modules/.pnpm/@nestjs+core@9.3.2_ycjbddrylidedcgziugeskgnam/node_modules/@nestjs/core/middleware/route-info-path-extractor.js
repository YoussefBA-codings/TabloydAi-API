"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteInfoPathExtractor = void 0;
const common_1 = require("@nestjs/common");
const shared_utils_1 = require("@nestjs/common/utils/shared.utils");
const utils_1 = require("../router/utils");
const route_path_factory_1 = require("./../router/route-path-factory");
class RouteInfoPathExtractor {
    constructor(applicationConfig) {
        this.applicationConfig = applicationConfig;
        this.routePathFactory = new route_path_factory_1.RoutePathFactory(applicationConfig);
    }
    extractPathsFrom({ path, method, version }) {
        const prefixPath = (0, shared_utils_1.stripEndSlash)((0, shared_utils_1.addLeadingSlash)(this.applicationConfig.getGlobalPrefix()));
        const excludedRoutes = this.applicationConfig.getGlobalPrefixOptions().exclude;
        const applicationVersioningConfig = this.applicationConfig.getVersioning();
        let versionPath = '';
        if (version && (applicationVersioningConfig === null || applicationVersioningConfig === void 0 ? void 0 : applicationVersioningConfig.type) === common_1.VersioningType.URI) {
            const versionPrefix = this.routePathFactory.getVersionPrefix(applicationVersioningConfig);
            versionPath = (0, shared_utils_1.addLeadingSlash)(versionPrefix + version.toString());
        }
        const isAWildcard = ['*', '/*', '/*/', '(.*)', '/(.*)'].includes(path);
        if (isAWildcard) {
            return Array.isArray(excludedRoutes)
                ? [
                    prefixPath + versionPath + (0, shared_utils_1.addLeadingSlash)(path),
                    ...excludedRoutes.map(route => versionPath + (0, shared_utils_1.addLeadingSlash)(route.path)),
                ]
                : [prefixPath + versionPath + (0, shared_utils_1.addLeadingSlash)(path)];
        }
        if (Array.isArray(excludedRoutes) &&
            (0, utils_1.isRouteExcluded)(excludedRoutes, path, method)) {
            return [versionPath + (0, shared_utils_1.addLeadingSlash)(path)];
        }
        return [prefixPath + versionPath + (0, shared_utils_1.addLeadingSlash)(path)];
    }
}
exports.RouteInfoPathExtractor = RouteInfoPathExtractor;
